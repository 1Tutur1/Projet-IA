## Afficher les arbres en fonction de leur hauteur sur la carte ##
stquentin_img = mpimg.imread('C:/Users/apeta/PycharmProjects/projetIA3A/stquentin.PNG')

# Tracer le scatter plot
bdd.plot(kind="scatter", x="longitude", y="latitude", alpha=0.4, label="arbres",
         c="haut_tot", colormap="gist_rainbow", colorbar=True, sharex=False, figsize=(10,7),s=10)
# Ajouter l'image avec plt.imshow
plt.imshow(stquentin_img, extent=(3.24, 3.33, 49.825, 49.873), alpha=0.5)

# Afficher la légende et le graphique
plt.legend()
plt.show()

## Fin affichage sur la carte


--------PA-----------

bdd = pd.read_csv("C:/Users/pierr/PycharmProjects/Projet_IA/Data_Arbre.csv",delimiter=";")

def visualisation_cluster_hauteur(nb_cluster):
    colonnes_a_convertir = ['fk_arb_etat','fk_stadedev']
    encoder = OrdinalEncoder()
    bdd[colonnes_a_convertir] = encoder.fit_transform(bdd[colonnes_a_convertir])

    X = bdd[["haut_tot"]]

    obj_kmeans = KMeans(n_clusters=nb_cluster, random_state=42)
    obj_kmeans.fit(X)
    indices_cluster = obj_kmeans.predict(X)
    bdd["cluster"] = indices_cluster

    stquentin = mpimg.imread("C:/Users/pierr/PycharmProjects/Projet_IA/stquentin.PNG")
    bdd.plot(kind="scatter", x="longitude", y="latitude", label="arbres",c="cluster",cmap="rainbow", figsize=(10,7),s=10,colorbar=False)
    plt.imshow(stquentin, extent=(3.24, 3.33, 49.825, 49.873))

    plt.legend()
    plt.show()

visualisation_cluster_hauteur(5)

-----------------------------



centroids = obj_kmeans.cluster_centers_
print(centroids)

## Convertir les données non-numériques en numérique ##
colonnes_a_convertir = ['fk_arb_etat','fk_stadedev']
encoder = OrdinalEncoder()
bdd[colonnes_a_convertir] = encoder.fit_transform(bdd[colonnes_a_convertir])

## Fin conversion ##

